%token EOF DOT COMMA SEMICOLON COLON PLUS MINUS STAR SLASH PERCENT AMPERSAND BAR CARET TILDE EXCLAM QUEST EQUALS LESSTHEN GREATTHEN LBRACKET RBRACKET LPAREN RPAREN LBRACE RBRACE GTE LTE EQU NEQ ASR SHL LOGICOR LOGICAND CATCH ELSE FALSE FOR IF THROW TRUE TRY VAR WHILE ID VAR_ID CONST_ID FUNC_ID INT CHAR STRING ERR CONST ADD_EQ SUB_EQ DIV_EQ MOD_EQ MUL_EQ AND_EQ OR_EQ XOR_EQ SHL_EQ ASR_EQ
%%

program 		: EOF
				| stat program
				| semi_stat semi_list
				| compound_stat program
//				| function_def program
				;

semi_list		: EOF
				| ';' program
				;

// --------------------------------------------------------------------------
// Statements
// -------------------------------------------------------------------------- 

compound_stat	: '{' { op_blk_open } stat_list '}' { op_blk_close } 
				;

stat_list		:
				| stat stat_list
				| semi_stat ';' stat_list
				;

loop_comp_stat	: '{' { op_blk_open } loop_stat_list '}' { op_blk_close } 
				;

loop_stat_list	:
				| stat loop_stat_list
				| semi_stat ';' loop_stat_list
				| "break" ';' {op_loop_break}
				| "continue" ';' {op_loop_continue}
				;

semi_stat		: "throw" exp { op_throw }
				| "var" var_list
				| "const" const_list
				| VAR_ID { op_push_ref } var_assign
				| FUNC_ID { op_push_ref } function_call { op_ret_discard }
				| FPVAR_ID { op_push_ref } fpvar_assign
				| FPFUNC_ID { op_push_ref } function_call { op_ret_discard }
				;

condition		: '(' exp ')'
				;


stat			: "for" { op_blk_open } '(' exp_lst_opt ';' { op_for_init } exp { op_for_cond } ';' exp_lst_opt { op_for_after } ')' loop_comp_stat	{ op_for_end, op_blk_close }
				| "while" { op_while_begin } condition { op_while_cond } loop_comp_stat	{ op_while_end }
				| "do" { op_do_while_begin } loop_comp_stat	"while" condition { op_do_while_cond,  op_do_while_end } ';'
				| "if" condition { op_if_cond } compound_stat else_opt { op_patch_ref }

				| "try" { op_try_begin } compound_stat catch_opt 
				;

else_opt		: 
				| "else" { op_if_else } compound_stat
				;

catch_opt		: { op_try_end }
				| "catch" { op_catch, op_blk_open } '(' ID { op_var_decl, op_push_tmp, op_var_init } ')' '{' stat_list '}' { op_blk_close, op_patch_ref }
				;


// --------------------------------------------------------------------------
// Variables
// -------------------------------------------------------------------------- 

var_list 		: var var_list1
				;

var_list1 		: 
				| ',' var_list
				;

var				: ID { op_var_decl } var_init_opt
				;

var_init_opt    : { op_pop_ref }
				| '=' var_init_assign
				;

var_init_assign : exp { op_var_init }
				| FPVAR_ID
				| FPCONST_ID
				;

// --------------------------------------------------------------------------
// Update (assignment) operators integer
// -------------------------------------------------------------------------- 

var_assign		: '=' exp { op_var_assign }
				| ADD_EQ { op_var_eval } additive_exp { op_add, op_var_assign }
				| SUB_EQ { op_var_eval } additive_exp { op_sub, op_var_assign }
				| DIV_EQ { op_var_eval } div_exp { op_div, op_var_assign }
				| MOD_EQ { op_var_eval } div_exp { op_mod, op_var_assign }
				| MUL_EQ { op_var_eval } mult_exp { op_mul, op_var_assign }
				| AND_EQ { op_var_eval } and_exp { op_and, op_var_assign }
				| OR_EQ  { op_var_eval } exp { op_or, op_var_assign }
				| XOR_EQ { op_var_eval } exp { op_xor, op_var_assign }
				| SHL_EQ { op_var_eval } shift_exp	{ op_shl, op_var_assign }
				| ASR_EQ { op_var_eval } shift_exp	{ op_asr, op_var_assign }
				;

attr_assign1	: '[' exp ']' { op_array_xlat } '.' attr_assign
				| '.'{ op_object_get } attr_assign
				;

attr_assign		: ID { op_push_tmp } attr_assign2
				;

attr_assign2    : '=' exp { op_attr_assign }
				| '[' exp ']' '=' exp { op_array_assign }
				| method_call { op_ret_discard }
				;

// --------------------------------------------------------------------------
// Constants
// -------------------------------------------------------------------------- 

const_list 		: const const_list1
				;

const_list1 	: 
				| ',' const_list
				;

const			: ID { op_const_decl } '=' const_init
				;

const_init		: const_exp { op_const_init }
				| fpconst_exp { op_const_init }
				;

const_exp		: INT { op_push_int }
				| CHAR { op_push_int }
				| STRING { op_push_string }
				| "true" { op_push_true }
				| "false" { op_push_false }
				| CONST_ID { op_push_ref, op_const_eval }
				;

fpconst_exp		: FPCONST_ID { op_fpconst_init }
				;

// --------------------------------------------------------------------------
// Method calls
// -------------------------------------------------------------------------- 

method_call		: { op_method_lookup } '(' arg_list_opt ')' { op_call } 
				;

// --------------------------------------------------------------------------
// Function calls
// -------------------------------------------------------------------------- 

function_call	: { op_function_lookup } '(' arg_list_opt ')' { op_call } 
				;

arg_list_opt	: 
				| arg_list 
				;

arg_list		: exp { op_arg } arg_list1 
				;

arg_list1		: 
				| ',' arg_list 
				;

// --------------------------------------------------------------------------
// For loop comma separated list of expressions
// -------------------------------------------------------------------------- 

exp_lst_opt		: 
				| exp_lst
				;

exp_lst			: VAR_ID { op_push_ref } var_assign exp_lst1
				;
				
exp_lst1		: 
				| ',' exp_lst
				;

// --------------------------------------------------------------------------
// Expressions
// -------------------------------------------------------------------------- 

exp 			: cond_exp
				| FPINT fpexp
				| FPCMP fprelational_exp	
				;

cond_exp		: or_exp cond_exp1
				;

cond_exp1		: 
				| '?' exp ':' cond_exp
				;

or_exp 			: and_exp or_exp1
				;

or_exp1			: 
				| '|' or_exp { op_or }
				| LOGICOR or_exp { op_logic_or }
				| '^' or_exp { op_xor }
				;

and_exp			: relational_exp and_exp1
				;

and_exp1		: 
				| '&' and_exp { op_and }
				| LOGICAND and_exp { op_logic_and }
				;

relational_exp	: shift_exp	relational_exp1
				;

relational_exp1	:
				| '<' relational_exp { op_lt }
				| '>' relational_exp { op_gt }
				| EQU relational_exp { op_equ }
				| NEQ relational_exp { op_neq }
				| GTE relational_exp { op_gte }
				| LTE relational_exp { op_lte }
				;

shift_exp		: additive_exp shift_exp1
				;

shift_exp1		: 
				| SHL shift_exp	{ op_shl }
				| ASR shift_exp	{ op_asr }
				;

additive_exp 	: div_exp additive_exp1
				;

additive_exp1 	: 
				| '+' additive_exp { op_add }
				| '-' additive_exp { op_sub }
				;


div_exp			: mult_exp div_exp1		
				;

div_exp1		: 
				| '/' div_exp { op_div }
				| '%' div_exp { op_mod }
				;

mult_exp		: unary_exp mult_exp1		
				;

mult_exp1		: 
				| '*' mult_exp { op_mul }
				;

unary_exp		: primary_exp
				| '~' unary_exp { op_inv }
				| '-' unary_exp { op_minus }
				| NOT unary_exp { op_not }
				;

primary_exp		: '(' exp ')'
				| INT { op_push_int }
				| CHAR { op_push_int }
				| STRING { op_push_string }
				| "true" { op_push_true }
				| "false" { op_push_false }
				| VAR_ID { op_push_ref, op_var_eval }
				| CONST_ID { op_push_ref, op_const_eval }
				| FUNC_ID { op_push_ref } function_call { op_ret_val }
				| ID { op_push_tmp } id_eval1
				;

id_eval1		: '[' exp ']' { op_array_xlat } '.' attr_eval
				| '.' { op_object_get } attr_eval		
				;

attr_eval		: ID { op_push_tmp } attr_eval1
				;


attr_eval1		: { op_attr_eval }
				| method_call { op_ret_val }
				| '[' exp ']' { op_array_eval }
				;


// --------------------------------------------------------------------------
// Function definitions
// -------------------------------------------------------------------------- 

func_comp_stat	: '{' { op_blk_open } func_stat_list '}' { op_blk_close } 
				;

func_stat_list	:
				| stat func_stat_list
				| semi_stat ';' func_stat_list
				| "return" retval_opt
				;

retval_opt      : { op_return }
				| exp { op_retval }
				;


function_def 	: "function" ID { op_fun_def, op_blk_open } '(' arg_lst_opt ')' '{'  func_stat_list '}' { op_fun_end, op_patch_ref } 
				;

arg_lst_opt		: 
				| arg_lst
				;

arg_lst			: ID { op_arg_decl } arg_opt
				;
				
arg_opt 		: 
				| ',' arg_lst
				;

// --------------------------------------------------------------------------
// Update (assignment) operators fixe/floating point
// -------------------------------------------------------------------------- 

fpvar_assign	: '=' fpexp { op_var_assign }
				| ADD_EQ { op_var_eval } fpadditive_exp { op_fpadd, op_var_assign }
				| SUB_EQ { op_var_eval } fpadditive_exp { op_fpsub, op_var_assign }
				| DIV_EQ { op_var_eval } fpdiv_exp { op_fpdiv, op_var_assign }
				| MUL_EQ { op_var_eval } fpmult_exp { op_fpmul, op_var_assign }
				;

fpattr_assign1	: '[' exp ']' { op_array_xlat } '.' fpattr_assign
				| '.'{ op_object_get } fpattr_assign
				;

fpattr_assign	: ID { op_push_tmp } fpattr_assign2
				;

fpattr_assign2    : '=' fpexp { op_attr_assign }
				| '[' exp ']' '=' fpexp { op_array_assign }
				| fpmethod_call { op_ret_discard }
				;

// --------------------------------------------------------------------------
// Expressions fixed/float point
// -------------------------------------------------------------------------- 

fprelational_exp	: fpadditive_exp fprelational_exp1
					;

fprelational_exp1	: '<' fpadditive_exp { op_fplt }
					| '>' fpadditive_exp { op_fpgt }
					| EQU fpadditive_exp { op_fpequ }
					| NEQ fpadditive_exp { op_fpneq }
					| GTE fpadditive_exp { op_fpgte }
					| LTE fpadditive_exp { op_fplte }
					;

fpexp 				: fpadditive_exp 
					| INTFP exp
					;

//fpcond_exp			: fpadditive_exp cond_exp1
//					;

//cond_exp1		    : 
//				    | or_exp '?' fpexp ':' fpcond_exp
//				    ;

fpadditive_exp 		: fpdiv_exp fpadditive_exp1
					;

fpadditive_exp1		: 
					| '+' fpadditive_exp { op_fpadd }
					| '-' fpadditive_exp { op_fpsub }
					;


fpdiv_exp			: fpmult_exp fpdiv_exp1		
					;

fpdiv_exp1			: 
					| '/' fpdiv_exp { op_fpdiv }
					;

fpmult_exp			: fpunary_exp fpmult_exp1		
					;

fpmult_exp1			: 
					| '*' fpmult_exp { op_fpmul }
					;

fpunary_exp			: fpprimary_exp
					| '-' fpunary_exp { op_fpminus }
					;

fpprimary_exp		: '(' fpexp ')'
					| FPLIT  { op_push_fp }
					| FPVAR_ID { op_push_ref, op_var_eval }
					| FPCONST_ID { op_push_ref, op_const_eval }
					;

